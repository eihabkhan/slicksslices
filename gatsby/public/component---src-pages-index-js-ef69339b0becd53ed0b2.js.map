{"version":3,"sources":["webpack:///./src/styles/Grids.js","webpack:///./src/components/ItemGrid.js","webpack:///./src/components/LoadingGrid.js","webpack:///./src/utils/useLatestData.js","webpack:///./src/pages/index.js"],"names":["HomepageGrid","styled","div","ItemsGrid","ItemStyles","ItemGrid","items","map","item","key","_id","className","name","width","height","src","image","asset","url","alt","style","background","metadata","lqip","backgroundSize","LoadingGrid","count","Array","from","length","_","index","gql","String","raw","details","useLatestData","useState","hotSlices","setHotSlices","slicemasters","setSlicemasters","useEffect","fetch","process","method","headers","body","JSON","stringify","query","then","res","json","console","log","data","StoreSettings","catch","error","CurrentlySlicing","HotSlices","HomePage","result"],"mappings":"2IAEaA,EAAeC,IAAOC,IAAV,0EAAGD,CAAH,6EAMZE,EAAYF,IAAOC,IAAV,uEAAGD,CAAH,0DAOTG,EAAaH,IAAOC,IAAV,wEAAGD,CAAH,2dCURI,EAtBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,kBAACH,EAAD,KACGG,EAAMC,KAAI,SAACC,GAAD,OACT,kBAACJ,EAAD,CAAYK,IAAKD,EAAKE,KACpB,2BACE,0BAAMC,UAAU,QAAQH,EAAKI,OAE/B,yBACEC,MAAM,MACNC,OAAO,MACPC,IAAQP,EAAKQ,MAAMC,MAAMC,IAAtB,wBACHC,IAAKX,EAAKI,KACVQ,MAAO,CACLC,WAAW,OAAQb,EAAKQ,MAAMC,MAAMK,SAASC,KAAnC,IACVC,eAAgB,iBCKbC,EAnBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClB,kBAACvB,EAAD,KACGwB,MAAMC,KAAK,CAAEC,OAAQH,IAAS,SAACI,EAAGC,GAAJ,OAC7B,kBAAC3B,EAAD,CAAYK,IAAKsB,GACf,2BACE,0BAAMpB,UAAU,QAAhB,eAEF,yBACEA,UAAU,UACVI,IAAI,0HACJI,IAAI,UACJN,MAAM,MACNC,OAAO,c,YCbXkB,EAAMC,OAAOC,IAEbC,EAAUH,EAAH,mIA2DEI,EA9CO,WAAM,MAEQC,qBAA3BC,EAFmB,KAERC,EAFQ,OAIcF,qBAAjCG,EAJmB,KAILC,EAJK,KAwC1B,OAlCAC,qBAAU,WAERC,MAAMC,+DAAqC,CACzCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAOlB,EAAF,qRAKKG,EAGAA,OAOXgB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAGLE,QAAQC,IAAIH,EAAII,KAAKC,eACrBlB,EAAaa,EAAII,KAAKC,cAAcnB,WACpCG,EAAgBW,EAAII,KAAKC,cAAcjB,iBAExCkB,OAAM,SAACC,GAAD,OAAWL,QAAQC,IAAI,QAASI,QACxC,IAEI,CACLrB,YACAE,iBCpDEoB,EAAmB,SAAC,GAAD,IAAGpB,EAAH,EAAGA,aAAH,OACvB,6BACE,wBAAI7B,UAAU,UACZ,0BAAMA,UAAU,aAAhB,oBAEF,mEACE6B,GAAgB,kBAAC,EAAD,CAAad,MAAO,IACrCc,KAAiBA,WAAcX,SAC9B,4DAEDW,aAAA,EAAAA,EAAcX,SAAU,kBAAC,EAAD,CAAUvB,MAAOkC,MAGxCqB,EAAY,SAAC,GAAD,IAAGvB,EAAH,EAAGA,UAAH,OAChB,6BACE,wBAAI3B,UAAU,UACZ,0BAAMA,UAAU,aAAhB,eAEF,0DACE2B,GAAa,kBAAC,EAAD,CAAaZ,MAAO,IAClCY,KAAcA,WAAWT,SAAU,4DACnCS,aAAA,EAAAA,EAAWT,SAAU,kBAAC,EAAD,CAAUvB,MAAOgC,MAmB5BwB,UAfE,WACf,IAAMC,EAAS3B,IACPI,EAA4BuB,EAA5BvB,aAAcF,EAAcyB,EAAdzB,UACtB,OACE,yBAAK3B,UAAU,UACb,uDACA,iEACA,kBAACX,EAAD,KACE,kBAAC,EAAD,CAAkBwC,aAAcA,IAChC,kBAAC,EAAD,CAAWF,UAAWA","file":"component---src-pages-index-js-ef69339b0becd53ed0b2.js","sourcesContent":["import styled from 'styled-components';\n\nexport const HomepageGrid = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: repeat(2, minmax(auto, 1fr));\n`;\n\nexport const ItemsGrid = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: 1fr 1fr;\n`;\n\n// single grid item for homepage\nexport const ItemStyles = styled.div`\n  text-align: center;\n  position: relative;\n  img {\n    height: auto;\n    font-size: 0;\n\n    &.loading {\n      --shine: white;\n      --background: var(--grey);\n      background-image: linear-gradient(\n        90deg,\n        var(--background) 0px,\n        var(--shine) 40px,\n        var(--background) 80px\n      );\n      background-size: 500px;\n      width: 100%;\n      animation: shine 1s infinite linear;\n    }\n  }\n\n  p {\n    transform: rotate(-2deg) translateY(-90%);\n    position: absolute;\n    width: 100%;\n    left: 0;\n  }\n\n  .mark {\n    display: inline;\n  }\n\n  /* animations */\n  @keyframes shine {\n    from {\n      background-position: 200%;\n    }\n    to {\n      background-position: -60px;\n    }\n  }\n`;\n","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\nconst ItemGrid = ({ items }) => (\n  <ItemsGrid>\n    {items.map((item) => (\n      <ItemStyles key={item._id}>\n        <p>\n          <span className=\"mark\">{item.name}</span>\n        </p>\n        <img\n          width=\"500\"\n          height=\"400\"\n          src={`${item.image.asset.url}?w=500&h=400&fit=crop`}\n          alt={item.name}\n          style={{\n            background: `url(${item.image.asset.metadata.lqip})`,\n            backgroundSize: 'cover',\n          }}\n        />\n      </ItemStyles>\n    ))}\n  </ItemsGrid>\n);\n\nexport default ItemGrid;\n","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\nconst LoadingGrid = ({ count }) => (\n  <ItemsGrid>\n    {Array.from({ length: count }, (_, index) => (\n      <ItemStyles key={index}>\n        <p>\n          <span className=\"mark\">Loading...</span>\n        </p>\n        <img\n          className=\"loading\"\n          src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAQAAADsOj3LAAAADklEQVR42mNkgANGQkwAAJoABWH6GPAAAAAASUVORK5CYII=\"\n          alt=\"loading\"\n          width=\"500\"\n          height=\"400\"\n        />\n      </ItemStyles>\n    ))}\n  </ItemsGrid>\n);\n\nexport default LoadingGrid;\n","import { useState, useEffect } from 'react';\n\nconst gql = String.raw;\n\nconst details = gql`\n  name\n  _id\n  image {\n    asset {\n      url\n      metadata {\n        lqip\n      }\n    }\n  }\n`;\n\nconst useLatestData = () => {\n  // Hot slices\n  const [hotSlices, setHotSlices] = useState();\n  //   Slicemasters\n  const [slicemasters, setSlicemasters] = useState();\n  //   use side effect to fetch data from graphQL endpoint\n  useEffect(() => {\n    //   when component loads, fetch the data\n    fetch(process.env.GATSBY_GRAPHQL_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: gql`\n          query {\n            StoreSettings(id: \"ville\") {\n              name\n              slicemasters {\n                ${details}\n              }\n              hotSlices {\n                ${details}\n              }\n            }\n          }\n        `,\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // TODO: check for errors\n        // set data to state\n        console.log(res.data.StoreSettings);\n        setHotSlices(res.data.StoreSettings.hotSlices);\n        setSlicemasters(res.data.StoreSettings.slicemasters);\n      })\n      .catch((error) => console.log('ERROR', error));\n  }, []);\n\n  return {\n    hotSlices,\n    slicemasters,\n  };\n};\n\nexport default useLatestData;\n","import React from 'react';\nimport ItemGrid from '../components/ItemGrid';\nimport LoadingGrid from '../components/LoadingGrid';\nimport { HomepageGrid } from '../styles/Grids';\n\nimport useLatestData from '../utils/useLatestData';\n\nconst CurrentlySlicing = ({ slicemasters }) => (\n  <div>\n    <h2 className=\"center\">\n      <span className=\"mark tilt\">Slicemasters On</span>\n    </h2>\n    <p>Standing by, ready to slice you up!</p>\n    {!slicemasters && <LoadingGrid count={4} />}\n    {slicemasters && !slicemasters?.length && (\n      <p>No one is working right now.</p>\n    )}\n    {slicemasters?.length && <ItemGrid items={slicemasters} />}\n  </div>\n);\nconst HotSlices = ({ hotSlices }) => (\n  <div>\n    <h2 className=\"center\">\n      <span className=\"mark tilt\">Hot Slices</span>\n    </h2>\n    <p>Come on by, buy the slice!</p>\n    {!hotSlices && <LoadingGrid count={4} />}\n    {hotSlices && !hotSlices?.length && <p>No one is working right now.</p>}\n    {hotSlices?.length && <ItemGrid items={hotSlices} />}\n  </div>\n);\n\nconst HomePage = () => {\n  const result = useLatestData();\n  const { slicemasters, hotSlices } = result;\n  return (\n    <div className=\"center\">\n      <h1>The Best Pizza downtown</h1>\n      <p>Open 11:00am to 11:00pm every day!</p>\n      <HomepageGrid>\n        <CurrentlySlicing slicemasters={slicemasters} />\n        <HotSlices hotSlices={hotSlices} />\n      </HomepageGrid>\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"sourceRoot":""}